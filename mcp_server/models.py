# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:33:36+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class NorthEastCorner(BaseModel):
    latitude: Optional[str] = None
    longitude: Optional[str] = None


class SouthWestCorner(BaseModel):
    latitude: Optional[str] = None
    longitude: Optional[str] = None


class Rectangle(BaseModel):
    northEastCorner: Optional[NorthEastCorner] = None
    southWestCorner: Optional[SouthWestCorner] = None


class AvoidAreas(BaseModel):
    rectangles: Optional[List[Rectangle]] = None


class CalculateReachableRangePostDataParameters(BaseModel):
    allowVignette: Optional[List[str]] = None
    avoidAreas: Optional[AvoidAreas] = None
    avoidVignette: Optional[List[str]] = None


class Rectangle1(BaseModel):
    northEastCorner: Optional[NorthEastCorner] = None
    southWestCorner: Optional[SouthWestCorner] = None


class AvoidAreas1(BaseModel):
    rectangles: Optional[List[Rectangle1]] = None


class SupportingPoint(BaseModel):
    latitude: Optional[str] = None
    longitude: Optional[str] = None


class CalculateRoutePostDataParameters(BaseModel):
    allowVignette: Optional[List[str]] = None
    avoidAreas: Optional[AvoidAreas1] = None
    avoidVignette: Optional[List[str]] = None
    supportingPoints: Optional[List[SupportingPoint]] = None


class Report(Enum):
    effectiveSettings = 'effectiveSettings'


class RouteType(Enum):
    fastest = 'fastest'
    shortest = 'shortest'
    eco = 'eco'
    thrilling = 'thrilling'


class TravelMode(Enum):
    car = 'car'
    truck = 'truck'
    taxi = 'taxi'
    bus = 'bus'
    van = 'van'
    motorcycle = 'motorcycle'
    bicycle = 'bicycle'
    pedestrian = 'pedestrian'


class Hilliness(Enum):
    low = 'low'
    normal = 'normal'
    high = 'high'


class Windingness(Enum):
    low = 'low'
    normal = 'normal'
    high = 'high'


class VehicleEngineType(Enum):
    combustion = 'combustion'
    electric = 'electric'


class VersionNumber(Enum):
    integer_1 = 1


class ContentType(Enum):
    xml = 'xml'
    json = 'json'
    jsonp = 'jsonp'


class AlternativeType(Enum):
    anyRoute = 'anyRoute'
    betterRoute = 'betterRoute'


class InstructionsType(Enum):
    coded = 'coded'
    text = 'text'
    tagged = 'tagged'


class RouteRepresentation(Enum):
    polyline = 'polyline'
    none = 'none'


class ComputeTravelTimeFor(Enum):
    none = 'none'
    all = 'all'
